#! /usr/bin/env python
# -*- Python -*-

####################################################################################################
#
# PyOpenGLng - An OpenGL Python Wrapper with a High Level API.
# Copyright (C) 2013 Salvaire Fabrice
#
####################################################################################################

####################################################################################################

import logging    

####################################################################################################
#
# Logging
#

logging.basicConfig(
    format='\033[1;32m%(asctime)s\033[0m - \033[1;34m%(name)s.%(funcName)s\033[0m - \033[1;31m%(levelname)s\033[0m - %(message)s',
    level=logging.INFO,
    )

####################################################################################################

from PyOpenGLng.GlApi import GlSpecParser, default_api_path
from PyOpenGLng.GlApi.ApiNumber import ApiNumber

####################################################################################################

gl_spec = GlSpecParser(default_api_path('gl'))

# trang -I rnc -O rng registry.rnc registry-rng.xml
# gl_spec = GlSpecParser(default_api_path('gl'), default_api_path('registry-rng'))

api = 'gl'
# api_number = '3.0'
api_number = '4.4'
profile = 'core'

api_enums, api_commands = gl_spec.generate_api(api, ApiNumber(api_number), profile)

####################################################################################################

for command in api_commands.itervalues():
    for parameter in command.parameters:
        if len(parameter.back_ref) > 1:
            # print command.return_type.long_repr()
            print command.prototype()

####################################################################################################

# for enum in api_enums:
#     print repr(enum)

# for command in api_commands.itervalues():
#     print repr(command)
#     # print command.prototype()
#     # print command.argument_types()
#     # print command.name, command.return_type.c_type, command.argument_types()

####################################################################################################
# 
# End
# 
####################################################################################################
